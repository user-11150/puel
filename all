[1mdiff --git a/puel/uel/core/builder/bytecode/BytecodeInfo.py b/puel/uel/core/builder/bytecode/BytecodeInfo.py[m
[1mindex f0ac588..14d48a1 100644[m
[1m--- a/puel/uel/core/builder/bytecode/BytecodeInfo.py[m
[1m+++ b/puel/uel/core/builder/bytecode/BytecodeInfo.py[m
[36m@@ -8,20 +8,23 @@[m [mimport typing as t[m
 # Bytecode types[m
 BT: TypeAlias = int[m
 [m
[31m-BT_ADD:          BT = 0b00000000_00000001[m
[31m-BT_MINUS:        BT = 0b00000000_00000010[m
[31m-BT_MUL:          BT = 0b00000000_00000011[m
[31m-BT_DIV:          BT = 0b00000000_00000100[m
[31m-BT_STORE_NAME:   BT = 0b00000000_00000101[m
[31m-BT_POP:          BT = 0b00000000_00000110[m
[31m-BT_LOAD_CONST:   BT = 0b00000000_00000111[m
[31m-BT_QPUT:         BT = 0b00000000_00001000[m
[31m-BT_QTOP:         BT = 0b00000000_00001001[m
[31m-BT_PUT:          BT = 0b00000000_00001010[m
[32m+[m[32mBT_ADD:          BT = 0b00000000_00000000_00000001[m
[32m+[m[32mBT_MINUS:        BT = 0b00000000_00000000_00000010[m
[32m+[m[32mBT_MUL:          BT = 0b00000000_00000000_00000011[m
[32m+[m[32mBT_DIV:          BT = 0b00000000_00000000_00000100[m
[32m+[m[32mBT_STORE_NAME:   BT = 0b00000000_00000000_00000101[m
[32m+[m[32mBT_POP:          BT = 0b00000000_00000000_00000110[m
[32m+[m[32mBT_LOAD_CONST:   BT = 0b00000000_00000000_00000111[m
[32m+[m[32mBT_QPUT:         BT = 0b00000000_00000000_00001000[m
[32m+[m[32mBT_QTOP:         BT = 0b00000000_00000000_00001001[m
[32m+[m[32mBT_PUT:          BT = 0b00000000_00000000_00001010[m
[32m+[m[32mBT_IF_TRUE_JUMP: BT = 0b00000000_00000000_00001011[m
[32m+[m[32mBT_IF_FALSE_JUMP:BT = 0b00000000_00000000_00001100[m
[32m+[m[32mBT_JUMP:         BT = 0b00000000_00000000_00001101[m
 [m
 class BytecodeInfo:[m
     def __init__(self, bytecode_type: BT,[m
[31m-                 value: t.Optional[str],[m
[32m+[m[32m                 value: t.Optional[t.Any],[m
                  pos: int):[m
         # 只有bytecode运行到哪的位置，token的位置被我搞丢了[m
         assert pos > 0, "the arg 1 must be great 0"[m
[36m@@ -51,7 +54,9 @@[m [mclass BytecodeInfo:[m
             BT_LOAD_CONST: "load const",[m
             BT_QPUT: "queue put",[m
             BT_QTOP: "queue top",[m
[31m-            BT_PUT: "put"[m
[32m+[m[32m            BT_PUT: "put",[m
[32m+[m[32m            BT_IF_TRUE_JUMP: "if true jump",[m
[32m+[m[32m            BT_JUMP: "jump to",[m
         }[m
         mapping.setdefault("unknown") # type: ignore[m
         return mapping[bt], bt[m
[1mdiff --git a/puel/uel/core/builder/bytecode/UELBytecodeCompiler.py b/puel/uel/core/builder/bytecode/UELBytecodeCompiler.py[m
[1mindex d4c181b..28d7a6f 100644[m
[1m--- a/puel/uel/core/builder/bytecode/UELBytecodeCompiler.py[m
[1m+++ b/puel/uel/core/builder/bytecode/UELBytecodeCompiler.py[m
[36m@@ -3,18 +3,19 @@[m [mfrom uel.core.builder.ast.ContainerNode import ContainerNode[m
 from uel.core.builder.ast.ExpressionNode import ExpressionNode[m
 from uel.core.builder.ast.VariableNode import VariableNode[m
 from uel.core.builder.ast.Constant import Constant[m
[31m-[m
 from uel.core.builder.ast.PushStackValueNode import PushStackValueNode[m
 from uel.core.builder.ast.PutNode import PutNode[m
[31m-[m
 from uel.core.builder.ast.BinOpNode import BinOpNode[m
[31m-from uel.core.errors.RaiseError import RaiseError[m
[31m-from uel.core.errors.UELException import UELException[m
[31m-[m
 from uel.core.builder.ast.AddNode import AddNode[m
 from uel.core.builder.ast.MinusNode import MinusNode[m
 from uel.core.builder.ast.MultNode import MultNode[m
 from uel.core.builder.ast.DivNode import DivNode[m
[32m+[m[32mfrom uel.core.builder.ast.IfNode import IfNode[m
[32m+[m
[32m+[m[32mfrom uel.core.errors.RaiseError import RaiseError[m
[32m+[m[32mfrom uel.core.errors.UELException import UELException[m
[32m+[m
[32m+[m[32mfrom uel.pyexceptions.CustomError import CustomError[m
 [m
 from uel.core.builder.bytecode import BytecodeInfo as bytecode[m
 from uel.core.builder.bytecode.BytecodeInfo import BytecodeInfo[m
[36m@@ -22,7 +23,6 @@[m [mfrom uel.core.builder.bytecode.BytecodeInfo import BT[m
 [m
 from uel.tools.func.share.runtime_type_check import runtime_type_check[m
 [m
[31m-from uel.pyexceptions.CustomError import CustomError[m
 [m
 import threading[m
 import typing as t[m
[36m@@ -141,6 +141,8 @@[m [mclass UELBytecodeCompiler(FourArithmethicMixin):[m
                 self.calculator(node)[m
                 raise ExitAndReturn[m
 [m
[32m+[m[32m            elif type(nod) is I[m
[32m+[m
             else:[m
                 raise NotSupportType[m
         [m
[1mdiff --git a/puel/uel/core/runner/Frame.py b/puel/uel/core/runner/Frame.py[m
[1mindex 8b15ce8..5180887 100644[m
[1m--- a/puel/uel/core/runner/Frame.py[m
[1m+++ b/puel/uel/core/runner/Frame.py[m
[36m@@ -5,10 +5,14 @@[m [mfrom queue import Queue[m
 [m
 class Frame:[m
     def __init__(self, stack: Stack,[m
[32m+[m[32m                 idx: int,[m
[32m+[m[32m                 bytecodes: t.List[t.Any],[m
                  prev_frame: t.Optional["Frame"]=None,[m
                  variables: t.Optional[dict]=None,[m
                  gqueue: t.Optional[Queue]=None):[m
         self.stack: Stack = stack[m
[32m+[m[32m        self.idx = idx[m
[32m+[m[32m        self.bytecodes = bytecodes[m
         self.prev_frame = prev_frame[m
         self.variables = variables[m
         if self.variables is None:[m
[1mdiff --git a/puel/uel/core/runner/Ueval.py b/puel/uel/core/runner/Ueval.py[m
[1mindex 70c6167..057ead6 100644[m
[1m--- a/puel/uel/core/runner/Ueval.py[m
[1m+++ b/puel/uel/core/runner/Ueval.py[m
[36m@@ -18,6 +18,10 @@[m [mclass Ueval:[m
         self.frame = Frame([m
             # Stack[m
             Stack[Any](),[m
[32m+[m[32m            # index[m
[32m+[m[32m            0,[m
[32m+[m[32m            # bytecodes[m
[32m+[m[32m            self.bytecodes,[m
             # Prev_frame[m
             None,[m
             # Variables[m
[36m@@ -34,8 +38,9 @@[m [mclass Ueval:[m
         self.frame.stack.push(value)[m
 [m
     def uelEval_EvalBytecodeDefault(self) -> None:[m
[31m-        for _bytecode in self.bytecodes:[m
[31m-            self.eval(_bytecode)[m
[32m+[m[32m        while self.frame.idx < len(self.bytecodes):[m
[32m+[m[32m            self.eval(self.bytecodes[self.frame.idx])[m
[32m+[m[32m            self.frame.idx += 1[m
 [m
     def eval(self, bytecode_info: BytecodeInfo) -> None:[m
         if bytecode_info.bytecode_type == bytecode.BT_LOAD_CONST:[m
[36m@@ -60,10 +65,15 @@[m [mclass Ueval:[m
 [m
         elif bytecode_info.bytecode_type == bytecode.BT_PUT:[m
             self.print(self.stack_top)[m
[32m+[m[32m        elif bytecode_info.bytecode_type == bytecode.BT_JUMP:[m
[32m+[m[32m            self.jump(bytecode_info.value)[m
 [m
         else:[m
             raise ValueError(f"Not support type: {bytecode_info.pretty_with_bytecode_type(bytecode_info.bytecode_type)[0]}")[m
 [m
[32m+[m[32m    def jump(self, idx):[m
[32m+[m[32m        self.frame.idx = idx - 2[m
[32m+[m
     @staticmethod[m
     def binary_op(frame: Frame, bytecode_info: BytecodeInfo):[m
         right_value = parse(frame.stack.top, frame)[m
