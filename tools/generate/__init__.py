import importlib
import os
import multiprocessing
import functools
import time
import re
import ast
import tokenize

_tasks = []

class task:
    def __init__(self, output):
        self.output = output
    
    def __call__(self, fn):
        @functools.wraps(fn)
        def inner(dirname):
            print(f"Generate {self.output}", end="")
            with open(os.path.join(dirname, self.output), "wb") as fp:
                res = fn(dirname)
                if type(res) is str:
                    res = res.encode("utf-8")
                fp.write(res)
            print()
        _tasks.append(inner)

def run(fn):
    def wrapper(target):
        @functools.wraps(target)
        def inner(*args, **kwargs):
            return fn(target(*args, **kwargs), target)
        return inner
    return wrapper

def python(by, from_=None):
    def decorator(f):
        def inner(*args, **kwargs):
            result = "# -*- coding: utf-8 -*-\n"
            result += auto_generate(by, from_)
            result += f(*args, **kwargs)
            return result
        return inner
    return decorator

def auto_generate(by, from_=None):
    result = f"# Auto-generated by {by}"
    if from_ is not None:
        result += f" from {from_}"
    return result + "\n"
        

def main(dirname):
    
    for name in filter(lambda s: s.startswith("gen") and s.endswith(".py"), os.listdir(os.path.dirname(__file__))):
        importlib.import_module("generate." + name.split(".")[0])
    
    [*map(lambda f: f(dirname), _tasks)]
